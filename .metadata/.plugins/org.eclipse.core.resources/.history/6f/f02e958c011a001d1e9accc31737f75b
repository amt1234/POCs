package com.microservice.patient.controller;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.microservice.patient.dto.PatientDTO;
import com.microservice.patient.entity.Patient;
import com.microservice.patient.service.PatientService;

@RestController
@RequestMapping("/patient")
@Validated
public class PatientController {

	@Autowired
	private PatientService patientService;

	Logger logger = LoggerFactory.getLogger(PatientController.class);

	@PostMapping(value = "/add", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Patient> addPatient(@Valid @RequestBody PatientDTO dto) {
		Patient patient = new Patient();
		patient.setPatientName(dto.getPatientName());
		patient.setPatientAge(dto.getPatientAge());
		patient.setPatientDisease(dto.getPatientDisease());
		patient.setHospitalId(dto.getHospitalId());
		patient.setContactNumber(dto.getContactNumber());
		Patient addedPatient = patientService.addPatient(patient);
		return new ResponseEntity<>(addedPatient, HttpStatus.CREATED);
	}

	@GetMapping(value = "/id/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Patient> getPatientById(@PathVariable Long id) {
		Patient patient = patientService.findPatientById(id);
		return new ResponseEntity<>(patient, HttpStatus.OK);
	}

	@GetMapping(value = "/all/{pageNumber}/{pageLimit}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Patient>> getAllPatients(@PathVariable("pageNumber") Integer pageNumber,@PathVariable("pageLimit") Integer pageLimit) {
		List<Patient> listOfPatient = patientService.findAllPatients(pageNumber, pageLimit);
		return new ResponseEntity<>(listOfPatient, HttpStatus.OK);
	}

	@GetMapping(value = "/findByHospitalId/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Patient>> getPatientsByHospitalId(@PathVariable Long id) {
		List<Patient> listOfPatients = patientService.findByHospitalId(id);
		return new ResponseEntity<>(listOfPatients, HttpStatus.OK);
	}

	@DeleteMapping(value = "/deleteByHospitalId/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> deletePatientsBasedOnHospitalId(@PathVariable Long id) {
		patientService.deletePatientsBasedOnHospitalId(id);
		return new ResponseEntity<>("Patients deleted sucessfully!", HttpStatus.OK);
	}
}
